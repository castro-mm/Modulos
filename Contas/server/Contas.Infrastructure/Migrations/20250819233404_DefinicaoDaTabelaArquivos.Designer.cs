// <auto-generated />
using System;
using Contas.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Contas.Infrastructure.Migrations
{
    [DbContext(typeof(ContasContext))]
    [Migration("20250819233404_DefinicaoDaTabelaArquivos")]
    partial class DefinicaoDaTabelaArquivos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Contas.Core.Entities.Arquivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Conteudo")
                        .IsRequired()
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<DateTime>("DataDeAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDeCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extensao")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<int>("RegistroDaContaId")
                        .HasColumnType("int");

                    b.Property<long>("Tamanho")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RegistroDaContaId");

                    b.ToTable("Arquivo", (string)null);
                });

            modelBuilder.Entity("Contas.Core.Entities.Credor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("CNPJ")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("DataDeAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDeCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<int>("SegmentoDoCredorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SegmentoDoCredorId");

                    b.ToTable("Credor", (string)null);
                });

            modelBuilder.Entity("Contas.Core.Entities.Pagador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("CPF")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("DataDeAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDeCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("Id");

                    b.ToTable("Pagador", (string)null);
                });

            modelBuilder.Entity("Contas.Core.Entities.RegistroDaConta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<string>("CodigoDeBarras")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("CredorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataDeAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDeCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataDePagamento")
                        .HasColumnType("DATETIME2");

                    b.Property<DateTime>("DataDeVencimento")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<int>("Mes")
                        .HasColumnType("int");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)");

                    b.Property<int>("PagadorId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<decimal>("ValorDoDesconto")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<decimal>("ValorDosJuros")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<decimal>("ValorPago")
                        .HasColumnType("DECIMAL(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CredorId");

                    b.HasIndex("PagadorId");

                    b.ToTable("RegistroDaConta", (string)null);
                });

            modelBuilder.Entity("Contas.Core.Entities.SegmentoDoCredor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataDeAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDeCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.ToTable("SegmentoDoCredor", (string)null);
                });

            modelBuilder.Entity("Contas.Core.Entities.System.LogDeErro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caminho")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<DateTime>("DataDeAtualizacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("DataDeCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Detalhes")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("VARCHAR(32)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("VARCHAR(45)");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("Metodo")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("Navegador")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("TraceId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("TraceId")
                        .IsUnique();

                    b.ToTable("LogDeErro", (string)null);
                });

            modelBuilder.Entity("Contas.Core.Entities.System.TrilhaDeAuditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caminho")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<DateTime>("DataDeAtualizacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("DataDeCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Entidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("VARCHAR(32)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("VARCHAR(45)");

                    b.Property<string>("Metodo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Navegador")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Operacao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("TraceId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("ValoresAntigos")
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("ValoresNovos")
                        .HasColumnType("VARCHAR(MAX)");

                    b.HasKey("Id");

                    b.ToTable("TrilhaDeAuditoria", (string)null);
                });

            modelBuilder.Entity("Contas.Core.Entities.Arquivo", b =>
                {
                    b.HasOne("Contas.Core.Entities.RegistroDaConta", "RegistroDaConta")
                        .WithMany("Arquivos")
                        .HasForeignKey("RegistroDaContaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistroDaConta");
                });

            modelBuilder.Entity("Contas.Core.Entities.Credor", b =>
                {
                    b.HasOne("Contas.Core.Entities.SegmentoDoCredor", "SegmentoDoCredor")
                        .WithMany("Credores")
                        .HasForeignKey("SegmentoDoCredorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SegmentoDoCredor");
                });

            modelBuilder.Entity("Contas.Core.Entities.RegistroDaConta", b =>
                {
                    b.HasOne("Contas.Core.Entities.Credor", "Credor")
                        .WithMany("RegistrosDaConta")
                        .HasForeignKey("CredorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contas.Core.Entities.Pagador", "Pagador")
                        .WithMany("RegistrosDaConta")
                        .HasForeignKey("PagadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credor");

                    b.Navigation("Pagador");
                });

            modelBuilder.Entity("Contas.Core.Entities.Credor", b =>
                {
                    b.Navigation("RegistrosDaConta");
                });

            modelBuilder.Entity("Contas.Core.Entities.Pagador", b =>
                {
                    b.Navigation("RegistrosDaConta");
                });

            modelBuilder.Entity("Contas.Core.Entities.RegistroDaConta", b =>
                {
                    b.Navigation("Arquivos");
                });

            modelBuilder.Entity("Contas.Core.Entities.SegmentoDoCredor", b =>
                {
                    b.Navigation("Credores");
                });
#pragma warning restore 612, 618
        }
    }
}
